# -*- coding: utf-8 -*-
"""cotacoes.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OKejLbPgFQUMpIoPm02UGvR3CIM7T2T0
"""

import requests
from kivy.app import App
from kivy.metrics import dp
from kivy.clock import Clock
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.spinner import Spinner
from kivy.uix.textinput import TextInput
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.progressbar import ProgressBar
from kivy.uix.recycleview import RecycleView
from kivy.uix.recycleview.views import RecycleDataViewBehavior


class SelectableRecycleBoxLayout(RecycleDataViewBehavior, BoxLayout):
    selected = False
    selectable = True


class SelectableButton(Button):
    def __init__(self):
        super().__init__()
        self.index = None

    def refresh_view_attrs(self, rv, index, data):
        self.index = index
        return super(SelectableButton, self).refresh_view_attrs(rv, index, data)

    def on_release(self):
        self.parent.select_with_touch(self.index)


def obter_cotacao(moeda):
    if moeda == 'brl':
        return None
    url = "https://api.coingecko.com/api/v3/simple/price"
    parametros = {
        "ids": moeda,
        "vs_currencies": "brl",
    }
    response = requests.get(url, params=parametros)
    if response.status_code == 200:
        data = response.json()
        return data.get(moeda, {}).get("brl")
    else:
        print("Erro ao obter a cotação")
        return None


class CotacoesApp(App):
    def __init__(self):
        super().__init__()
        self.layout = None
        self.progress_bar = None
        self.loading_label = None
        self.moedas_list = []
        self.moedas_filtradas = []
        self.spinner = None
        self.cotacoes_label = None
        self.moedas_rv = None
        self.search_input = None

    def build(self):
        self.layout = BoxLayout(orientation='vertical', padding=dp(50), spacing=dp(10), size_hint=(1, 1))

        self.loading_label = Label(text="Carregando moedas...", size_hint=(1, None), height=dp(40))
        self.layout.add_widget(self.loading_label)

        self.progress_bar = ProgressBar(max=100, size_hint=(1, None), height=dp(40))
        self.layout.add_widget(self.progress_bar)

        self.moedas_rv = RecycleView(size_hint=(1, None), opacity=0)
        self.moedas_rv.viewclass = 'SelectableButton'
        self.layout.add_widget(self.moedas_rv)

        self.search_input = TextInput(hint_text="Pesquisar moedas", multiline=False, size_hint=(1, None), height=dp(40),
                                      opacity=0)
        self.search_input.bind(text=self.atualizar_lista_moedas)
        self.layout.add_widget(self.search_input)

        self.spinner = Spinner(text="Selecione uma moeda", values=[], size_hint=(1, None), height=dp(40), opacity=0)
        self.spinner.bind(text=self.selecionar_moeda, on_press=self.filtrar_moedas)
        self.layout.add_widget(self.spinner)

        self.cotacoes_label = Label(text="", size_hint=(1, None), height=dp(4))
        self.layout.add_widget(self.cotacoes_label)

        self.carregar_moedas()

        return self.layout

    def carregar_moedas(self):
        def finalizar_carregamento(dt):
            self.spinner.values = self.moedas_list
            self.moedas_rv.data = [{'text': moeda} for moeda in self.moedas_list]

        def atualizar_progresso(dt):
            self.progress_bar.value += 5
            if self.progress_bar.value == 100:
                self.loading_label.opacity = 0
                self.progress_bar.opacity = 0
                self.search_input.opacity = 1
                self.spinner.opacity = 1

        url = "https://api.coingecko.com/api/v3/coins/list"

        response = requests.get(url)
        if response.status_code == 200:
            moedas = response.json()
            self.moedas_list = [moeda["id"] for moeda in moedas]
            Clock.schedule_interval(atualizar_progresso, 0.1)
            Clock.schedule_once(finalizar_carregamento, 1)

    def atualizar_lista_moedas(self, instance, value):
        self.moedas_filtradas = [moeda for moeda in self.moedas_list if moeda.lower().startswith(value.lower())]
        self.moedas_rv.data = [{'text': moeda} for moeda in self.moedas_filtradas]

    def selecionar_moeda(self, spinner, moeda):
        if moeda == 'Selecione uma moeda':
            return
        cotacao = obter_cotacao(moeda)
        if cotacao is not None:
            self.cotacoes_label.text = f"A {moeda}: Equivale a R${cotacao} BRL"
        else:
            self.cotacoes_label.text = f"Erro ao obter a cotação de {moeda}"

    def filtrar_moedas(self, spinner):
        if len(self.moedas_filtradas) > 0:
            self.spinner.values = self.moedas_filtradas
        else:
            self.spinner.values = self.moedas_list

    def on_start(self):
        self.atualizar_lista_moedas(None, "")


if __name__ == '__main__':
    CotacoesApp().run()